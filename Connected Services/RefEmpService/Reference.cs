//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cognizant_FSD.RefEmpService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/CTS_FSD_Service.Employee")]
    [System.SerializableAttribute()]
    public partial class Employee : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeptField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmpFirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmpIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmpLastNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dept {
            get {
                return this.DeptField;
            }
            set {
                if ((object.ReferenceEquals(this.DeptField, value) != true)) {
                    this.DeptField = value;
                    this.RaisePropertyChanged("Dept");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmpFirstName {
            get {
                return this.EmpFirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EmpFirstNameField, value) != true)) {
                    this.EmpFirstNameField = value;
                    this.RaisePropertyChanged("EmpFirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmpId {
            get {
                return this.EmpIdField;
            }
            set {
                if ((this.EmpIdField.Equals(value) != true)) {
                    this.EmpIdField = value;
                    this.RaisePropertyChanged("EmpId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmpLastName {
            get {
                return this.EmpLastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EmpLastNameField, value) != true)) {
                    this.EmpLastNameField = value;
                    this.RaisePropertyChanged("EmpLastName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RefEmpService.IEmployeeService")]
    public interface IEmployeeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/AddEmployee", ReplyAction="http://tempuri.org/IEmployeeService/AddEmployeeResponse")]
        void AddEmployee(Cognizant_FSD.RefEmpService.Employee newEmployee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/AddEmployee", ReplyAction="http://tempuri.org/IEmployeeService/AddEmployeeResponse")]
        System.Threading.Tasks.Task AddEmployeeAsync(Cognizant_FSD.RefEmpService.Employee newEmployee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/RetrieveEmployees", ReplyAction="http://tempuri.org/IEmployeeService/RetrieveEmployeesResponse")]
        Cognizant_FSD.RefEmpService.Employee[] RetrieveEmployees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/RetrieveEmployees", ReplyAction="http://tempuri.org/IEmployeeService/RetrieveEmployeesResponse")]
        System.Threading.Tasks.Task<Cognizant_FSD.RefEmpService.Employee[]> RetrieveEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/RetrieveEmployeeById", ReplyAction="http://tempuri.org/IEmployeeService/RetrieveEmployeeByIdResponse")]
        Cognizant_FSD.RefEmpService.Employee RetrieveEmployeeById(int employeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/RetrieveEmployeeById", ReplyAction="http://tempuri.org/IEmployeeService/RetrieveEmployeeByIdResponse")]
        System.Threading.Tasks.Task<Cognizant_FSD.RefEmpService.Employee> RetrieveEmployeeByIdAsync(int employeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/UpdateEmployee", ReplyAction="http://tempuri.org/IEmployeeService/UpdateEmployeeResponse")]
        void UpdateEmployee(Cognizant_FSD.RefEmpService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/UpdateEmployee", ReplyAction="http://tempuri.org/IEmployeeService/UpdateEmployeeResponse")]
        System.Threading.Tasks.Task UpdateEmployeeAsync(Cognizant_FSD.RefEmpService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/DeleteEmployee", ReplyAction="http://tempuri.org/IEmployeeService/DeleteEmployeeResponse")]
        bool DeleteEmployee(int employeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/DeleteEmployee", ReplyAction="http://tempuri.org/IEmployeeService/DeleteEmployeeResponse")]
        System.Threading.Tasks.Task<bool> DeleteEmployeeAsync(int employeeId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmployeeServiceChannel : Cognizant_FSD.RefEmpService.IEmployeeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmployeeServiceClient : System.ServiceModel.ClientBase<Cognizant_FSD.RefEmpService.IEmployeeService>, Cognizant_FSD.RefEmpService.IEmployeeService {
        
        public EmployeeServiceClient() {
        }
        
        public EmployeeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmployeeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddEmployee(Cognizant_FSD.RefEmpService.Employee newEmployee) {
            base.Channel.AddEmployee(newEmployee);
        }
        
        public System.Threading.Tasks.Task AddEmployeeAsync(Cognizant_FSD.RefEmpService.Employee newEmployee) {
            return base.Channel.AddEmployeeAsync(newEmployee);
        }
        
        public Cognizant_FSD.RefEmpService.Employee[] RetrieveEmployees() {
            return base.Channel.RetrieveEmployees();
        }
        
        public System.Threading.Tasks.Task<Cognizant_FSD.RefEmpService.Employee[]> RetrieveEmployeesAsync() {
            return base.Channel.RetrieveEmployeesAsync();
        }
        
        public Cognizant_FSD.RefEmpService.Employee RetrieveEmployeeById(int employeeId) {
            return base.Channel.RetrieveEmployeeById(employeeId);
        }
        
        public System.Threading.Tasks.Task<Cognizant_FSD.RefEmpService.Employee> RetrieveEmployeeByIdAsync(int employeeId) {
            return base.Channel.RetrieveEmployeeByIdAsync(employeeId);
        }
        
        public void UpdateEmployee(Cognizant_FSD.RefEmpService.Employee employee) {
            base.Channel.UpdateEmployee(employee);
        }
        
        public System.Threading.Tasks.Task UpdateEmployeeAsync(Cognizant_FSD.RefEmpService.Employee employee) {
            return base.Channel.UpdateEmployeeAsync(employee);
        }
        
        public bool DeleteEmployee(int employeeId) {
            return base.Channel.DeleteEmployee(employeeId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEmployeeAsync(int employeeId) {
            return base.Channel.DeleteEmployeeAsync(employeeId);
        }
    }
}
